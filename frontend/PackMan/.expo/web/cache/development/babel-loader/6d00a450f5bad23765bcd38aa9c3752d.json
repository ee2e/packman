{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Desktop/\\u1110\\u1173\\u11A8\\u1112\\u116A\\u1111\\u1173\\u1105\\u1169\\u110C\\u1166\\u11A8\\u1110\\u1173/s03p23d208/frontend/PackMan/components/Main/Calendars/index.js\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Calendar, LocaleConfig, CalendarList, Agenda } from \"react-native-calendars\";\nexport default function Calendars() {\n  LocaleConfig.locales[\"fr\"] = {\n    monthNames: [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\", \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\"],\n    monthNamesShort: [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\", \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\"],\n    dayNames: [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"],\n    dayNamesShort: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"],\n    today: \"오늘\"\n  };\n  LocaleConfig.defaultLocale = \"fr\";\n  return React.createElement(View, {\n    style: styles.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, React.createElement(Agenda, {\n    items: {\n      \"2012-05-22\": [{\n        name: \"item 1 - any js object\"\n      }],\n      \"2012-05-23\": [{\n        name: \"item 2 - any js object\",\n        height: 80\n      }],\n      \"2012-05-24\": [],\n      \"2012-05-25\": [{\n        name: \"item 3 - any js object\"\n      }, {\n        name: \"any js object\"\n      }]\n    },\n    loadItemsForMonth: function loadItemsForMonth(month) {\n      console.log(\"trigger items loading\");\n    },\n    onCalendarToggled: function onCalendarToggled(calendarOpened) {\n      console.log(calendarOpened);\n    },\n    onDayPress: function onDayPress(day) {\n      console.log(\"day pressed\");\n    },\n    onDayChange: function onDayChange(day) {\n      console.log(\"day changed\");\n    },\n    selected: \"2012-05-16\",\n    minDate: \"2012-05-10\",\n    maxDate: \"2012-05-30\",\n    pastScrollRange: 50,\n    futureScrollRange: 50,\n    renderItem: function renderItem(item, firstItemInDay) {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 18\n        }\n      });\n    },\n    renderDay: function renderDay(day, item) {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 18\n        }\n      });\n    },\n    renderEmptyDate: function renderEmptyDate() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 18\n        }\n      });\n    },\n    renderKnob: function renderKnob() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 18\n        }\n      });\n    },\n    renderEmptyData: function renderEmptyData() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 18\n        }\n      });\n    },\n    rowHasChanged: function rowHasChanged(r1, r2) {\n      return r1.text !== r2.text;\n    },\n    hideKnob: true,\n    markedDates: {\n      \"2012-05-16\": {\n        selected: true,\n        marked: true\n      },\n      \"2012-05-17\": {\n        marked: true\n      },\n      \"2012-05-18\": {\n        disabled: true\n      }\n    },\n    disabledByDefault: true,\n    onRefresh: function onRefresh() {\n      return console.log(\"refreshing...\");\n    },\n    refreshing: false,\n    refreshControl: null,\n    theme: {\n      agendaDayTextColor: \"yellow\",\n      agendaDayNumColor: \"green\",\n      agendaTodayColor: \"red\",\n      agendaKnobColor: \"blue\"\n    },\n    style: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\"\n  },\n  inner: {\n    flex: 1,\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/eun/Desktop/특화프로젝트/s03p23d208/frontend/PackMan/components/Main/Calendars/index.js"],"names":["React","Calendar","LocaleConfig","CalendarList","Agenda","Calendars","locales","monthNames","monthNamesShort","dayNames","dayNamesShort","today","defaultLocale","styles","inner","name","height","month","console","log","calendarOpened","day","item","firstItemInDay","r1","r2","text","selected","marked","disabled","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","agendaKnobColor","StyleSheet","create","container","flex","backgroundColor","justifyContent"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { StyleSheet, View, Text } from \"react-native\";\r\n\r\nimport {\r\n  Calendar,\r\n  LocaleConfig,\r\n  CalendarList,\r\n  Agenda,\r\n} from \"react-native-calendars\";\r\n\r\nexport default function Calendars() {\r\n  LocaleConfig.locales[\"fr\"] = {\r\n    monthNames: [\r\n      \"1월\",\r\n      \"2월\",\r\n      \"3월\",\r\n      \"4월\",\r\n      \"5월\",\r\n      \"6월\",\r\n      \"7월\",\r\n      \"8월\",\r\n      \"9월\",\r\n      \"10월\",\r\n      \"11월\",\r\n      \"12월\",\r\n    ],\r\n    monthNamesShort: [\r\n      \"1월\",\r\n      \"2월\",\r\n      \"3월\",\r\n      \"4월\",\r\n      \"5월\",\r\n      \"6월\",\r\n      \"7월\",\r\n      \"8월\",\r\n      \"9월\",\r\n      \"10월\",\r\n      \"11월\",\r\n      \"12월\",\r\n    ],\r\n    dayNames: [\r\n      \"일요일\",\r\n      \"월요일\",\r\n      \"화요일\",\r\n      \"수요일\",\r\n      \"목요일\",\r\n      \"금요일\",\r\n      \"토요일\",\r\n    ],\r\n    dayNamesShort: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"],\r\n    today: \"오늘\",\r\n  };\r\n  LocaleConfig.defaultLocale = \"fr\";\r\n\r\n  return (\r\n    <View style={styles.inner}>\r\n      {/* <Calendar /> */}\r\n      <Agenda\r\n        // The list of items that have to be displayed in agenda. If you want to render item as empty date\r\n        // the value of date key has to be an empty array []. If there exists no value for date key it is\r\n        // considered that the date in question is not yet loaded\r\n        items={{\r\n          \"2012-05-22\": [{ name: \"item 1 - any js object\" }],\r\n          \"2012-05-23\": [{ name: \"item 2 - any js object\", height: 80 }],\r\n          \"2012-05-24\": [],\r\n          \"2012-05-25\": [\r\n            { name: \"item 3 - any js object\" },\r\n            { name: \"any js object\" },\r\n          ],\r\n        }}\r\n        // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n        loadItemsForMonth={(month) => {\r\n          console.log(\"trigger items loading\");\r\n        }}\r\n        // Callback that fires when the calendar is opened or closed\r\n        onCalendarToggled={(calendarOpened) => {\r\n          console.log(calendarOpened);\r\n        }}\r\n        // Callback that gets called on day press\r\n        onDayPress={(day) => {\r\n          console.log(\"day pressed\");\r\n        }}\r\n        // Callback that gets called when day changes while scrolling agenda list\r\n        onDayChange={(day) => {\r\n          console.log(\"day changed\");\r\n        }}\r\n        // Initially selected day\r\n        selected={\"2012-05-16\"}\r\n        // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n        minDate={\"2012-05-10\"}\r\n        // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n        maxDate={\"2012-05-30\"}\r\n        // Max amount of months allowed to scroll to the past. Default = 50\r\n        pastScrollRange={50}\r\n        // Max amount of months allowed to scroll to the future. Default = 50\r\n        futureScrollRange={50}\r\n        // Specify how each item should be rendered in agenda\r\n        renderItem={(item, firstItemInDay) => {\r\n          return <View />;\r\n        }}\r\n        // Specify how each date should be rendered. day can be undefined if the item is not first in that day.\r\n        renderDay={(day, item) => {\r\n          return <View />;\r\n        }}\r\n        // Specify how empty date content with no items should be rendered\r\n        renderEmptyDate={() => {\r\n          return <View />;\r\n        }}\r\n        // Specify how agenda knob should look like\r\n        renderKnob={() => {\r\n          return <View />;\r\n        }}\r\n        // Specify what should be rendered instead of ActivityIndicator\r\n        renderEmptyData={() => {\r\n          return <View />;\r\n        }}\r\n        // Specify your item comparison function for increased performance\r\n        rowHasChanged={(r1, r2) => {\r\n          return r1.text !== r2.text;\r\n        }}\r\n        // Hide knob button. Default = false\r\n        hideKnob={true}\r\n        // By default, agenda dates are marked if they have at least one item, but you can override this if needed\r\n        markedDates={{\r\n          \"2012-05-16\": { selected: true, marked: true },\r\n          \"2012-05-17\": { marked: true },\r\n          \"2012-05-18\": { disabled: true },\r\n        }}\r\n        // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\r\n        disabledByDefault={true}\r\n        // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\r\n        onRefresh={() => console.log(\"refreshing...\")}\r\n        // Set this true while waiting for new data from a refresh\r\n        refreshing={false}\r\n        // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.\r\n        refreshControl={null}\r\n        // Agenda theme\r\n        theme={{\r\n          agendaDayTextColor: \"yellow\",\r\n          agendaDayNumColor: \"green\",\r\n          agendaTodayColor: \"red\",\r\n          agendaKnobColor: \"blue\",\r\n        }}\r\n        // Agenda container style\r\n        style={{}}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  inner: {\r\n    flex: 1,\r\n    // alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}