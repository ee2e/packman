{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/eun/Desktop/\\u1110\\u1173\\u11A8\\u1112\\u116A\\u1111\\u1173\\u1105\\u1169\\u110C\\u1166\\u11A8\\u1110\\u1173/s03p22d208/frontend/PackMan/App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useFonts } from '@use-expo/font';\nimport * as Font from \"expo-font\";\nimport { Ionicons, FontAwesome } from \"@expo/vector-icons\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { Asset } from \"expo-asset\";\nimport { AppLoading } from 'expo';\n\nrequire(\"@expo/vector-icons/build/vendor/react-native-vector-icons/Fonts/Ionicons.ttf\");\n\nvar cacheImages = function cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n};\n\nvar cacheFonts = function cacheFonts(fonts) {\n  return fonts.map(function (font) {\n    return Font.loadAsync(font);\n  });\n};\n\nvar bmhannaFonts = {\n  'BMHANNA': require(\"./assets/fonts/BMHANNAPro.ttf\")\n};\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setIsReady = _useState2[1];\n\n  var loadAssets = function loadAssets() {\n    var fonts = cacheFonts([Ionicons.font, FontAwesome.font]);\n    return Promise.all([].concat(_toConsumableArray(images), _toConsumableArray(fonts)));\n  };\n\n  var onFinish = function onFinish() {\n    return setIsReady(true);\n  };\n\n  var _useFonts = useFonts(bmhannaFonts),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      isLoaded = _useFonts2[0];\n\n  if (!isLoaded) {\n    return React.createElement(AppLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return isReady ? React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: require(\"./assets/logo.gif\"),\n    style: styles.logo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"PACKMAN\"), React.createElement(StatusBar, {\n    style: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  })) : React.createElement(AppLoading, {\n    startAsync: loadAssets,\n    onFinish: onFinish,\n    onError: console.error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  logo: {\n    width: 200,\n    resizeMode: 'contain'\n  },\n  text: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    color: '#174793',\n    fontFamily: 'BMHANNA'\n  }\n});","map":{"version":3,"sources":["/Users/eun/Desktop/특화프로젝트/s03p22d208/frontend/PackMan/App.js"],"names":["StatusBar","React","useState","useFonts","Font","Ionicons","FontAwesome","NavigationContainer","Asset","AppLoading","require","cacheImages","images","map","image","Image","prefetch","fromModule","downloadAsync","cacheFonts","fonts","font","loadAsync","bmhannaFonts","App","isReady","setIsReady","loadAssets","Promise","all","onFinish","isLoaded","styles","container","logo","text","console","error","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","resizeMode","fontSize","fontWeight","color","fontFamily"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, View, Image } from 'react-native';\n\nimport { useFonts } from '@use-expo/font';\nimport * as Font from \"expo-font\";\nimport { Ionicons, FontAwesome } from \"@expo/vector-icons\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { Asset } from \"expo-asset\";\n\nimport { AppLoading } from 'expo';\n\nrequire(\"@expo/vector-icons/build/vendor/react-native-vector-icons/Fonts/Ionicons.ttf\");\n\nconst cacheImages = images =>\nimages.map(image => {\n  if (typeof image === 'string') {\n    return Image.prefetch(image);\n  } else {\n    return Asset.fromModule(image).downloadAsync();\n  }\n});\n\nconst cacheFonts = fonts => fonts.map(font => Font.loadAsync(font));\n\nconst bmhannaFonts = {\n  'BMHANNA': require('./assets/fonts/BMHANNAPro.ttf'),\n};\n\nexport default function App() {\n  const [isReady, setIsReady] = useState(false);\n\n  const loadAssets = () => {\n    const fonts = cacheFonts([Ionicons.font, FontAwesome.font]);\n    return Promise.all([...images, ...fonts]);\n  }\n\n  const onFinish = () => setIsReady(true);\n\n  const [isLoaded] = useFonts(bmhannaFonts);\n\n  if (!isLoaded) {\n    return <AppLoading />;\n  }\n\n  return isReady ? (\n    <View style={styles.container}>\n      <Image source={require('./assets/logo.gif')} style={styles.logo} />\n      <Text style={styles.text}>PACKMAN</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  ) : (\n    <AppLoading \n      startAsync={loadAssets}\n      onFinish={onFinish}\n      onError={console.error}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    width: 200,\n    resizeMode: 'contain'\n  },\n  text: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    color: '#174793',\n    fontFamily: 'BMHANNA'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}